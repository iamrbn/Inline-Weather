{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "yellow",
    "glyph" : "sun"
  },
  "name" : "Inline Weather",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: yellow; icon-glyph: sun;\n\n\/\/+++++++++++ START CONFIG AREA +++++++++++++++\n\nconst unit = 'metric' \/\/Units of measurement: 'standard', 'metric' and 'imperial' units are available.\nconst unitSymb = '°' \/\/Celsius\nconst unitSpeed = 'km\/h'\nconst language = 'de' \/\/learn more: https:\/\/openweathermap.org\/current#multi\nconst apiKey = \"YOUR API KEY GOES HERE\"\nconst standardParameter = \"30;current\"\/\/Refresh Intervall; Weather-Datas (current or forecast)\n\n\/\/++++++++++++++ END CONFIG AREA +++++++++++++\n\nlet df = new DateFormatter()\nlet fm = FileManager.iCloud()\nlet dir = fm.joinPath(fm.documentsDirectory(), 'Inline Weather')\nif (!fm.fileExists(dir)) fm.createDirectory(dir)\nlet modulePath = fm.joinPath(dir, \"module.js\")\nif (!fm.fileExists(modulePath))await loadModule()\nfm.downloadFileFromiCloud(modulePath)\nlet module = importModule('Inline Weather\/module')\nlet uCheck = await module.updateCheck(fm, modulePath, 1.0)\nlet wSize = config.widgetFamily\nlet wParameter = await args.widgetParameter\nif (wParameter == null || wParameter.length <= 3) wParameter = standardParameter\nlet refreshInt = wParameter.match(\/\\d\/g).join(\"\")\nlet wContent =  wParameter.match(\/[a-zA-Z]\/g).join(\"\")\n\nLocation\n.setAccuracyToKilometer()\n\/\/.setAccuracyToHundredMeters()\nlet location = await Location.current()\nlet data = await module.getFromAPI(`https:\/\/api.openweathermap.org\/data\/2.5\/onecall?lat=${ location.latitude }&lon=${ location.longitude }&exclude=minutely,hourly&units=${ unit }&lang=${ language }&appid=${ apiKey }`)\n\/\/console.log(JSON.stringify(data, null, 2))\n\/\/log(`https:\/\/api.openweathermap.org\/data\/2.5\/onecall?lat=${ location.latitude }&lon=${ location.longitude }&exclude=minutely,hourly&units=metric&lang=de&appid=${ apiKey }`)\n\nif (config.runsInAccessoryWidget || config.runsInWidget){\n switch(wSize){\n   case 'accessoryInline': w = await createInline(); w.presentAccessoryInline(); break;\n   case 'accessoryRectangular': if(wContent == 'current'){w = await createRectangularCurrent(); w.presentAccessoryRectangular();} else if(wContent == 'forecast'){w = await createRectangularForecast(); w.presentAccessoryRectangular()} break;\n   case 'accessoryCircular': w = await createCircular(); w.presentAccessoryCircular(); break;\n   default: w = await createInline(); w.presentAccessoryInline(); break;\n }\n Script.setWidget(w)\n Script.complete()\n} else if (config.runsInApp){\n  QuickLook.present(await createTable(data))\n};\n\n\n\/\/########### CREATE INLINE LS WIDGET #########\nasync function createInline(){\n\tlet w = new ListWidget()\n\t    w.refreshAfterDate = new Date(Date.now()+1000*60*refreshInt)\n\tlet stck = w.addStack()\n   await createHorizontallyStack(\n    module.getSF(data.current.weather[0].id, data.current.weather[0].icon),\n    18,\n    stck,\n    \"h1\",\n    module.calcTemp(data.current.temp) + unitSymb + ' ↑' + module.calcTemp(data.daily[0].temp.max) + '↓' + module.calcTemp(data.daily[0].temp.min) + ' ⇣' + Math.round(data.daily[0].pop * 100 \/ 1) + '%',\n    10\n    )\n  return w\n};\n\n\n\/\/######### CREATE CIRCULAR LS WIDGET ###########\nasync function createCircular(){\n  let w = new ListWidget()\n      w.refreshAfterDate = new Date(Date.now()+1000*60*refreshInt)\n      w.addAccessoryWidgetBackground = true\n      \/\/w.setPadding(0, 5, 0, 5)\n  let sf = SFSymbol.named(module.getSF(data.current.weather[0].id, data.current.weather[0].icon))\n      sf.applyFont(Font.lightSystemFont(125))\n      sf.applyLightWeight()\n      \n  let mainStack = w.addStack()\n      mainStack.layoutVertically()\n      mainStack.size = new Size(70, 70)\/\/75\n      \/\/mainStack.backgroundColor = Color.black()\n      \n  let topStack = mainStack.addStack()\n      topStack.bottomAlignContent()\n      \/\/topStack.backgroundColor = Color.green()\n      \n      topStack.addSpacer()\n      \n  let txt = topStack.addText(module.calcTemp(data.current.temp)+unitSymb)\n      txt.font = Font.regularSystemFont(17)\n      txt.leftAlignText()\n      topStack.addSpacer(2)\n      \/\/txt.minimumScaleFactor = 0.8\n  let img = topStack.addImage(sf.image)\n      img.imageSize = new Size(27, 22)\n      img.centerAlignImage()\n      \n      topStack.addSpacer(6)\n      \n  let middleStack = mainStack.addStack()\n      middleStack.bottomAlignContent()\n      \/\/middleStack.backgroundColor = Color.red()\n      \n      middleStack.addSpacer()\n      \n  let desc = middleStack.addText('↑' + module.calcTemp(data.daily[0].temp.max) + unitSymb + ' ↓' + module.calcTemp(data.daily[0].temp.min) + unitSymb)\n      desc.font = Font.lightSystemFont(12)\n      desc.lineLimit = 1\n      desc.minimumScaleFactor = 0.8\n      desc.centerAlignText()\n      \n      middleStack.addSpacer()\n      \n  let bottomStack = mainStack.addStack()\n      bottomStack.bottomAlignContent()\n      \/\/bottomStack.backgroundColor = Color.purple()\n      \n      bottomStack.addSpacer()\n      \n  let desc2 = bottomStack.addText('⇣' + data.daily[0].pop*100\/1 + '%')\n      desc2.font = Font.lightSystemFont(12)\n      desc2.lineLimit = 1\n      desc2.minimumScaleFactor = 0.8\n      desc2.centerAlignText()\n      \/\/w.addSpacer(1)\n      \n      bottomStack.addSpacer()\n      \n  return w\n};\n\n\n\/\/########## CREATE RECTANGULAR CURRENT ###########\nasync function createRectangularCurrent(){\n let w = new ListWidget()\n     w.refreshAfterDate = new Date(Date.now()+1000*60*refreshInt)\n     w.addAccessoryWidgetBackground = true\n     w.setPadding(0, 0, 0, 0)\n    \n let mainStack = w.addStack()\n     mainStack.layoutVertically()\n     mainStack.centerAlignContent()\n     \/\/mainStack.backgroundColor = Color.green()\n      \n let headerStack = mainStack.addStack()\n     headerStack.bottomAlignContent()\n     headerStack.setPadding(0, 0, -1, 0)\n     \/\/headerStack.backgroundColor = Color.purple()\n    \n let bodyStack = mainStack.addStack()\n     bodyStack.centerAlignContent()\n     \/\/bodyStack.backgroundColor = Color.yellow()\n    \n let leftBodyStack = bodyStack.addStack()\n     leftBodyStack.layoutVertically()\n     leftBodyStack.centerAlignContent()\n     leftBodyStack.spacing = -1\n     \/\/leftBodyStack.backgroundColor = Color.blue()\n\n let rightBodyStack = bodyStack.addStack()\n     rightBodyStack.layoutVertically()\n     rightBodyStack.centerAlignContent()\n     rightBodyStack.spacing = -1\n     \/\/rightBodyStack.backgroundColor = Color.black()\n   \n await createHorizontallyStack(module.getSF(data.current.weather[0].id, data.current.weather[0].icon), 16, headerStack, \"h1\", module.calcTemp(data.current.temp)+unitSymb+ ' ' +data.daily[0].weather[0].description, 13)\n await createHorizontallyStack('arrow.up.square', 11, leftBodyStack, \"line1\", module.calcTemp(data.daily[0].temp.max)+unitSymb, 11)\n await createHorizontallyStack('arrow.down.square', 11, leftBodyStack, \"line2\", module.calcTemp(data.daily[0].temp.min)+unitSymb, 11)\n await createHorizontallyStack('sunrise.fill', 12, leftBodyStack, \"line3\", module.calcTime(df, data.current.sunrise), 10)\n await createHorizontallyStack('sunset.fill', 12, leftBodyStack, \"line4\", module.calcTime(df, data.current.sunset), 10)\n\n await createHorizontallyStack('person.and.background.dotted', 13, rightBodyStack, \"line1\", module.calcTemp(data.current.feels_like)+unitSymb, 11)\n await createHorizontallyStack('cloud.fill', 12, rightBodyStack, \"line2\", data.current.clouds + '%', 11)\n await createHorizontallyStack('wind', 12, rightBodyStack, \"line3\", data.current.wind_speed + unitSpeed + ' | ' + module.calcWindDirection(data, 0), 11)\n await createHorizontallyStack(module.calcMoonPhase(data, 0)[0], 10, rightBodyStack, \"line4\", module.calcMoonPhase(data, 0)[1], 11)\n\n  return w\n};\n\n\n\/\/########## CREATE RECTANGULAR FORECAST ###########\nasync function createRectangularForecast(){\n  let w = new ListWidget()\n      w.refreshAfterDate = new Date(Date.now()+1000*60*refreshInt)\n      \/\/w.addAccessoryWidgetBackground = true\n  \n  let mainStack = w.addStack()\n      mainStack.layoutVertically()\n  \n  let headerStack = mainStack.addStack()\n  let bodyStack = mainStack.addStack()\n  \n  await createHorizontallyStack(module.getSF(data.current.weather[0].id, data.current.weather[0].icon), 15, headerStack, \"h\", module.calcTemp(data.current.temp) + unitSymb + ' ' + data.daily[0].weather[0].description, 11)\n  \n      bodyStack.addSpacer(1)\n  \n  let rows = 6\n  for (let i=0; i<rows; i++){\n  createVerticallyStack(module.calcDate(df, data.daily[i].dt, 'EE'), Math.round(data.daily[i].pop*100\/1), module.getSF(data.daily[i].weather[0].id, data.daily[i].weather[0].icon), 16, bodyStack, 'd2', module.calcTemp(data.daily[i].temp.max), module.calcTemp(data.daily[i].temp.min), 7)\n};\n\nreturn w\n};\n\n\n\/\/ ############ CREATE TABLE ###########\nasync function createTable(datas){\n  let table = new UITable();\n      table.showSeparators = true\n  \n  let headerRow = new UITableRow()\n      headerRow.backgroundColor = new Color('#48484A')\n      headerRow.isHeader = true\n      headerRow.height = 65\n      headerRow.dismissOnSelect = false\n\n      iconCell = UITableCell.imageAtURL('https:\/\/openweathermap.org\/themes\/openweathermap\/assets\/img\/logo_white_cropped.png')\n      iconCell.widthWeight = 25\n      headerRow.addCell(iconCell)\n      \n  let cityDatas = await module.getFromAPI(`https:\/\/api.openweathermap.org\/data\/2.5\/weather?lat=${ datas.lat }&lon=${ datas.lon }&units=${ unit }&lang=${ language }&appid=${ apiKey }`)\n      textCell = UITableCell.button('📍'+ cityDatas.name)\n      textCell.onTap = () => changeLocation(cityDatas.id.toString(), cityDatas.name)\n      \/\/cityIDPopUp()\n      textCell.rightAligned()\n      textCell.widthWeight = 25\n      headerRow.addCell(textCell)\n\n      table.addRow(headerRow)\n      \n   if (uCheck.needUpdate){\n      uRow = new UITableRow()\n      uRow.height = 70\n      uRow.backgroundColor = Color.white()\n      uTitle = uRow.addText(`New server version ${uCheck.uC.version} is now available on GitHub!`, 'Run script in-app for changelog dialogue')\n      uTitle.widthWeight = 40\n      uTitle.titleColor = Color.red()\n      uTitle.subtitleColor = Color.red()\n      uImage = uRow.addImage(module.sfSymbol('square.and.arrow.down', '#007AFF', 10))\/\/007AFF\n      uImage.leftAligned()\n      uImage.widthWeight = 3\n      table.addRow(uRow)\n  }\n      \n  for (i=0; i<datas.daily.length; i++){\n      let row = new UITableRow()\n          row.height = 77\n          row.cellSpacing = 5\n          row.onSelect = async function(i){\n      QuickLook.present(await showDetailView(datas, i-1))\n    }\n    row.dismissOnSelect = false\n    if (i==0) row.backgroundColor = new Color('#0C83FF26')\n        imageCell = row.addImageAtURL(`http:\/\/openweathermap.org\/img\/wn\/${datas.daily[i].weather[0].icon}@2x.png`)\n        imageCell.leftAligned()\n        imageCell.widthWeight = 1\n\n    let titleCell = row.addText(\n        module.calcDate(df, datas.daily[i].dt, 'EEEE, dd.MMMM'),\n        `↑${module.calcTemp(datas.daily[i].temp.max)+unitSymb} ↓${module.calcTemp(datas.daily[i].temp.min)+unitSymb} • ⇣${Math.round(datas.daily[i].pop * 100 \/ 1)}% • ${datas.daily[i].weather[0].description}`)\n        titleCell.widthWeight = 5\n        titleCell.titleFont = Font.mediumMonospacedSystemFont(16)\n        titleCell.subtitleFont = Font.lightMonospacedSystemFont(12)\n        titleCell.subtitleColor = new Color('#EF7150')\n        table.addRow(row)\n     };\n \n  let sourceRow = new UITableRow()\n      sourceRow.height = 50\n      sourceRow.cellSpacing = 2\n      sourceRow.onSelect = async function(){\n      await weatherPopUp(datas)\n    }\n      \n  let sourceContent = (datas.alerts == undefined) ? \"No weather sources or alerts found in your area!\" : datas.alerts[0].sender_name + ': ' + datas.alerts[0].event\n   \n  let footerCell = sourceRow.addText(sourceContent) \n      footerCell.titleFont = Font.lightRoundedSystemFont(15)\n      footerCell.titleColor = new Color('#EF7150')\n      footerCell.leftAligned() \n  \n      \/\/sourceRow.addCell(footerCell)\n      table.addRow(sourceRow) \n  \n  let creditFooter = new UITableRow() \n      creditFooter.height = 40\n      creditFooter.cellSpacing = 7 \n  \n  let creditFooterCellImg = UITableCell.imageAtURL('https:\/\/cdn-icons-png.flaticon.com\/512\/25\/25231.png')\n      creditFooterCellImg.widthWeight = 1\n  \n  let creditFooterCellbutton = UITableCell.button(\"Created by iamrbn - Show on GitHub↗\")\n      creditFooterCellbutton.widthWeight = 15\n      creditFooterCellbutton.onTap = () => Safari.openInApp(\"https:\/\/github.com\/iamrbn\/Inline-Weather\", false)\n   \n      creditFooter.addCell(creditFooterCellImg)\n      creditFooter.addCell(creditFooterCellbutton)\n      \n      table.addRow(creditFooter)\n  \n    return table\n};\n \n\/\/ ######## CREATE DETAIL VIEW ######## \nasync function showDetailView(datas, idx){\n  let table = new UITable()\n      \/\/table.showSeparators = true\n  \n  let headerRow = new UITableRow()\n      headerRow.backgroundColor = new Color('#48484A')\n      headerRow.isHeader = true\n      headerRow.height = 65\n      headerRow.dismissOnSelect = false\n       \n  let iconCell = UITableCell.imageAtURL('https:\/\/openweathermap.org\/themes\/openweathermap\/assets\/img\/logo_white_cropped.png')\n      iconCell.widthWeight = 25\n      headerRow.addCell(iconCell)\n      table.addRow(headerRow)\n   \n  let row = new UITableRow()\n      row.height = 85\n      row.cellSpacing = 25\n      \n  let textCell = row.addText(module.calcDate(df, datas.daily[idx].dt, 'EEEE, dd.MMMM'))\n      textCell.widthWeight = 25\n      textCell.titleFont = Font.boldMonospacedSystemFont(25)  \n      \/\/textCell.subtitleColor = new Color('#EF7150')\n      \/\/textCell.subtitleFont = Font.semiboldMonospacedSystemFont(25)\n      textCell.leftAligned() \n  let imageCell = row.addImageAtURL(`http:\/\/openweathermap.org\/img\/wn\/${datas.daily[idx].weather[0].icon}@2x.png`)\n      imageCell.widthWeight = 15\n      imageCell.rightAligned()\n      table.addRow(row)\n  \n  let row1 = new UITableRow()\n      row1.height = 40\n  let textCell1 = row1.addText(\">\" + datas.daily[idx].weather[0].description)\n      textCell1.titleColor = new Color('#EF7150')\n      textCell1.titleFont = Font.semiboldMonospacedSystemFont(25)\n      textCell1.leftAligned()\n      table.addRow(row1)\n  \n  let row2 = new UITableRow()\n      row2.height = 66\n  \n  let sfCell = row2.addImage(module.sfSymbol('arrow.up', '#EF7150', 0))\n      sfCell.leftAligned()\n  let txtCell = row2.addText(module.calcTemp(datas.daily[idx].temp.max) + unitSymb, 'Highest')\n      txtCell.titleColor = new Color('#EF7150')\n      txtCell.titleFont = Font.regularMonospacedSystemFont(14)\n      txtCell.subtitleFont = Font.lightMonospacedSystemFont(9)\n  \n  let sfCell2 = row2.addImage(module.sfSymbol('arrow.down', '#EF7150', 0))\n      sfCell2.leftAligned()\n  let txtCell2 = row2.addText(module.calcTemp(datas.daily[idx].temp.min) + unitSymb, \"Lowest\")\n      txtCell2.titleColor = new Color('#EF7150')\n      txtCell2.titleFont = Font.regularMonospacedSystemFont(14)\n      txtCell2.subtitleFont = Font.lightMonospacedSystemFont(9)\n  \n  let sfCell3 = row2.addImage(module.sfSymbol('person.and.background.dotted', '#EF7150', 0))\n      sfCell3.leftAligned()\n  let txtCell3 = row2.addText(module.calcTemp(datas.daily[idx].feels_like.day) + unitSymb, \"Feels Like\")\n      txtCell3.titleColor = new Color('#EF7150')\n      txtCell3.titleFont = Font.regularMonospacedSystemFont(14)\n      txtCell3.subtitleFont = Font.lightMonospacedSystemFont(9)\n      txtCell3.rightAligned()\n  \n      table.addRow(row2)\n  \n  await createTableRow(table, 'person.and.background.dotted', 'Feels Like By Night: ' + module.calcTemp(datas.daily[idx].feels_like.night) + unitSymb)\n  await createTableRow(table, 'drop.fill', 'Probability Of Precipitation: ' + Math.round(datas.daily[idx].pop*100\/1) + '%')\n  await createTableRow(table, 'drop.triangle.fill', 'Precipitation: ' + datas.daily[idx].rain + 'mm\/h')\n  await createTableRow(table, 'sunrise.fill', 'Sunrise: ' + module.calcTime(df, datas.daily[idx].sunrise))\n  await createTableRow(table, 'sunset.fill', 'Sunset: ' + module.calcTime(df, datas.daily[idx].sunset))\n  await createTableRow(table, 'sun.max.fill', 'UV Index: ' + datas.daily[idx].uvi)\n  await createTableRow(table, 'cloud.fill', 'Clouds: ' + datas.daily[idx].clouds + '%')\n  await createTableRow(table, 'wind', 'Wind Speed: ' + datas.daily[idx].wind_speed + unitSpeed + ' | ' + module.calcWindDirection(data, idx))\n  await createTableRow(table, 'humidity.fill', 'Humidity: ' + datas.daily[idx].humidity + '%')\n  await createTableRow(table, 'arrow.right.and.line.vertical.and.arrow.left', 'Pressure: ' + datas.daily[idx].pressure + 'hPa')\n  await createTableRow(table, module.calcMoonPhase(data, idx)[0], 'Moon Phase: ' + module.calcMoonPhase(data, idx)[1] + ' (' + datas.daily[idx].moon_phase + ')')\n  \n  return table\n};\n\nasync function createTableRow(table, sf, text){\n  row = new UITableRow()\n  row.dismissOnSelect = false\n  row.height = 45\n  row.cellSpacing = 5\n  \n  sf = SFSymbol.named(sf)\n  sf.applyFont(Font.regularMonospacedSystemFont(45))\n  sf.applyBoldWeight()\n  sf.tintColor = new Color('#EF7150')\n  sf.imageSize = new Size(15, 15)\n  \n  cell1 = UITableCell.image(sf.image)\n  cell1.widthWeight = 5\n  cell1.centerAligned()\n  cell2 = UITableCell.text(text)\n  cell2.titleFont = Font.thinMonospacedSystemFont(12)\n  cell2.minimumScaleFactor = 0.8\n  cell2.widthWeight = 25\n  \n  row.addCell(cell1)\n  row.addCell(cell2)\n  \n  table.addRow(row)\n};\n\nfunction createVerticallyStack(day, pop, sfSymbol, sfSize, baseStack, newStack, text1, text2, textSize){\n  newStack = baseStack.addStack()\n  newStack.layoutVertically()\n  newStack.centerAlignContent()\n  newStack.size = new Size(23.5, 42)\n  newStack.spacing = -2\n  \n  date = newStack.addText(day)\n  date.font = Font.boldSystemFont(textSize)\n  date.textColor = Color.white()\n  \n  newStack.addSpacer(3)\n  \n  rain = newStack.addText(pop+\"%\")\n  rain.font = Font.mediumSystemFont(textSize-1)\n  rain.textColor = Color.white()\n  \n  newStack.addSpacer(3)\n  \n  sf = SFSymbol.named(sfSymbol)\n  sf.applyFont(Font.lightRoundedSystemFont(45))\n  img = newStack.addImage(sf.image)\n  img.imageSize = new Size(sfSize, sfSize)\n  img.tintColor = Color.white()\n  \n  newStack.addSpacer(3)\n  \n  txt1 = newStack.addText('↑' + text1 + unitSymb)\n  txt1.font = Font.regularSystemFont(textSize)\n  txt1.textColor = Color.white()\n  \n  txt2 = newStack.addText('↓' + text2 + unitSymb)\n  txt2.font = Font.mediumSystemFont(textSize)\n  txt2.textColor = Color.white()\n};\n\nfunction createHorizontallyStack(sfSymbol, sfSize, baseStack, newStack, text, textSize){\n  newStack = baseStack.addStack()\n  newStack.centerAlignContent()  \n  sf = SFSymbol.named(sfSymbol)\n  sf.applyFont(Font.lightMonospacedSystemFont(sfSize))\n  sf.applyBoldWeight()\n  img = newStack.addImage(sf.image)\n  img.imageSize = new Size(sfSize, sfSize)\n  img.tintColor = Color.white()\n  text = newStack.addText(text)\n  text.font = Font.regularMonospacedSystemFont(textSize)\n  text.textColor = Color.white()\n  text.minimumScaleFactor = 0.6\n  text.lineLimit = 1\n  newStack.addSpacer()\n};\n\nasync function weatherPopUp(datas){\n alrt = new Alert()\n alrt.title = datas.alerts[1].sender_name\n alrt.message = datas.alerts[1].event + ':\\n' +  datas.alerts[1].description + '\\n' + module.calcDate(df, datas.alerts[1].start, 'EEEE, dd.MM.yy, HH:mm') + ' - ' + module.calcDate(df, datas.alerts[1].end, 'EEEE, dd.MM.yy, HH:mm')\n alrt.addAction('OK')\n await alrt.presentSheet()\n};\n\nasync function changeLocation(id, currentLoc){\n  alrt = new Alert()\n  alrt.title = 'Change Location'\n  alrt.message = 'CityID of your current location: ' + id\n  alrt.addTextField('Search city by name', currentLoc)\n  alrt.addAction('Change')\n  alrt.addCancelAction('Cancel')\n  idx = await alrt.present()\n  if (idx===0){\n  log(module.replaceUmlauts(alrt.textFieldValue(0)))\n  coord = await module.getFromAPI(`https:\/\/api.openweathermap.org\/data\/2.5\/weather?q=${ module.replaceUmlauts(alrt.textFieldValue(0)) },${ language }&units=${ unit }&lang=${ language }&appid=${ apiKey }`)\n  log({coord})\n  long = coord.coord.lon\n  lati = coord.coord.lat\n  log({long,lati})\n  dataLoc = await module.getFromAPI(`https:\/\/api.openweathermap.org\/data\/2.5\/onecall?lat=${ lati }&lon=${ long }&exclude=minutely,hourly&units=${ unit }&lang=${ language }&appid=${ apiKey }`)\n  log({dataLoc})\n  QuickLook.present(await createTable(dataLoc))\n    }\n};\n\nasync function loadModule(){\n   req = new Request('https:\/\/raw.githubusercontent.com\/iamrbn\/Inline-Weather\/main\/module.js')\n   moduleFile = await req.loadString()\n   fm.writeString(modulePath, moduleFile)\n   console.warn('loaded modul.js file from github')\n};\n\n\n\/\/====================================================\n\/\/ ------------------- END OF SCRIPT -----------------\n\/\/====================================================",
  "share_sheet_inputs" : [

  ]
}